

//TODO Start adding enumerations so that I don't have to deal with spelling mistakes. They're just nice for later anyway.

options {
    STATIC = false;
}
PARSER_BEGIN(ControllerFSMFactory)
package com.lcsc.hackathon.kinectcontroller.config;

import java.io.*;
import java.util.*;
import com.lcsc.hackathon.kinectcontroller.controller.*;

public class ControllerFSMFactory {
    private ControllerStateMachine _csm;
    private String _startingStateId = null;

    private void addStartingState(String stateId) {
        //If we can't change the state, then we'll just store the id until the state is added later.
        if (!_csm.changeState(stateId)) {
            _startingStateId = stateId;
        }
    }

    private void addState(ControllerState state) {
        _csm.addState(state);

        //If the starting state hasn't been set and this state is the starting state.
        if (_startingStateId != null && _startingStateId.equals(state.stateId)) {
            if (_csm.changeState(_startingStateId)) {
                _startingStateId = null;
            }
        }
    }
}

PARSER_END(ControllerFSMFactory)

TOKEN:
{
    < STARTING_STATE : "starting_state" > |
    < IS : "is" > |
    < VERSION : "version" > |
    < STATE : "state" > |
    < GESTURE : "gesture" > |
    < MOUSE_GESTURE : "gesture mouse using" > |
    < RULE : "rule" > |
    < REACTION : "reaction" > |
    < NUMBER : (["0"-"9"])+ (".") (["0"-"9"])* > |
    < IDENTIFIER : (["0"-"9"]) | (["a"-"z"] | ["A"-"Z"] | "_" | "-")+ >
}

SKIP: {
    " " |
    "\t" |
    "\n" |
    "\r" |
    <"//" (~["\n","\r"])* ("\n"|"\r")>
}

ControllerStateMachine create() :
{
    Token t;
    int version;
}
{
    {_csm = new ControllerStateMachine();}
    
    <VERSION>
    
    t = <NUMBER>

    {version = Integer.parseInt(t.image);}
    
    {
        switch(version) {
            case 1:
                parseVersion1();
                break;
        }
    }

    <EOF>
    {return _csm;}
}

void parseVersion1() :
{
    String stateId;
    ControllerState state;
}
{
    (
        (
            <STARTING_STATE>
            <IS>
            stateId = <IDENTIFIER>.image
            {addStartingState(stateId);}
        )
        |
        (
            <STATE>
            stateId = <IDENTIFIER>.image
            state = parseState(stateId)
            {addState(state);}
        )
    )*
}

ControllerState parseState(String stateId) :
{
    ControllerState state;
    String gestureId;
    String armId;
}
{
    {state = new ControllerState(stateId);}
    (
        (
            <GESTURE>
            gestureId = <IDENTIFIER>.image
            //This needs to return some information that can be given to the controller state.
            //parseGesture()
        )
        |
        (
            <MOUSE_GESTURE>
            armId = <IDENTIFIER>.image
            //TODO Add mouse gesture to the state
        )
    )*
    {return state;}
}