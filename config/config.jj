options {
    STATIC = false;
}
PARSER_BEGIN(ControllerFSMFactory)
package com.lcsc.hackathon.kinectcontroller.config;

import java.io.*;
import java.util.*;
import com.lcsc.hackathon.kinectcontroller.controller.*;
import com.lcsc.hackathon.kinectcontroller.posturerules.*;

import com.lcsc.hackathon.kinectcontroller.Conversions;

//These are the Reaction objects.

import com.lcsc.hackathon.kinectcontroller.emulation.*;
import com.lcsc.hackathon.kinectcontroller.emulation.reactions.*;
import com.lcsc.hackathon.kinectcontroller.emulation.reactions.config.*;

public class ControllerFSMFactory {
    private ControllerStateMachine _csm;
    private String _startingStateId = null;

    private void addStartingState(String stateId) {
        //If we can't change the state, then we'll just store the id until the state is added later.
        if (!_csm.changeState(stateId)) {
            _startingStateId = stateId;
        }
    }

    private void addState(ControllerState state) {
        _csm.addState(state);

        //If the starting state hasn't been set and this state is the starting state.
        if (_startingStateId != null && _startingStateId.equals(state.stateId)) {
            if (_csm.changeState(_startingStateId)) {
                _startingStateId = null;
            }
        }
    }
}

PARSER_END(ControllerFSMFactory)

//Generic tokens
TOKEN: {
    < STARTING_STATE : "starting_state" > |
    < IS : "is" > |
    < VERSION : "version" > |
    < STATE : "state" > |
    < GESTURE : "gesture" > |
    < MOUSE_GESTURE : "gesture mouse using" > |
    < RULE : "rule" > |
    < END1 : "end1" > |
    < END2 : "end2" > |
    < JOINT1 : "joint1" > |
    < JOINT2 : "joint2" > |
    < VERTEX : "vertex" > |
    < MIN_ANGLE : "min_angle" > |
    < MAX_ANGLE : "max_angle" > |
    < MIN_DISTANCE : "min_distance" > |
    < MAX_DISTANCE : "max_distance" > |
    < REACTION : "reaction" > |
    < KEY : "key" > |
    < NUMBER : (["0"-"9"])+ (".")* (["0"-"9"])* > |
    < TEST_NUMBER : (["0"-"9"])+ > |
    < IDENTIFIER : (["0"-"9"] | ["a"-"z"] | ["A"-"Z"] | "_" | "-")+ >
}

SKIP: {
    " " |
    "\t" |
    "\n" |
    "\r" |
    <"//" (~["\n","\r"])* ("\n"|"\r")>
}

ControllerStateMachine create() :
{
    Token t;
    int version;
}
{
    {_csm = new ControllerStateMachine();}
    
    <VERSION>
    
    t = <NUMBER>

    {version = Integer.parseInt(t.image);}
    
    {
        switch(version) {
            case 1:
                parseVersion1();
                break;
        }
    }

    <EOF>
    {return _csm;}
}

void parseVersion1() :
{
    String stateId;
    ControllerState state;
}
{
    (
        (
            <STARTING_STATE>
            <IS>
            stateId = <IDENTIFIER>.image
            {addStartingState(stateId);}
        )
        |
        (
            <STATE>
            stateId = <IDENTIFIER>.image
            state = parseState(stateId)
            {addState(state);}
        )
    )*
}

ControllerState parseState(String stateId) :
{
    ControllerState state;
    String gestureId;
    String armId;
}
{
    {state = new ControllerState(stateId, _csm);}
    (
        (
            <GESTURE>
            gestureId = <IDENTIFIER>.image
            //This needs to return some information that can be given to the controller state.
            parseGesture(gestureId, state)
        )
        |
        (
            <MOUSE_GESTURE>
            armId = <IDENTIFIER>.image
            //TODO Add mouse gesture to the state
        )
    )*
    {return state;}
}

void parseGesture(String gestureId, ControllerState state) :
{
    String          ruleType;
    String          reactionType;
    Token           t;
    Gesture         gesture = new Gesture(gestureId, state);
}
{
    (
        (
            <RULE>
            ruleType = <IDENTIFIER>.image
            {
                switch(RuleType.fromString(ruleType)) {
                    case ABS_DISTANCE:
                        break;
                    case ABS_DISTANCEX:
                        break;
                    case ABS_DISTANCEY:
                        break;
                    case ABS_DISTANCEZ:
                        break;
                    case ANGLE:
                        parseAngleRule(state, gesture);
                        break;
                    case DISTANCE:
                    case DISTANCEX:
                    case DISTANCEY:
                    case DISTANCEZ:
                        parseDistanceRule(state, gesture, RuleType.fromString(ruleType));
                        break;
                }
            }
        )
        |
        (
            <REACTION>
            reactionType = <IDENTIFIER>.image
            {
                switch(ReactionType.fromString(reactionType)) {
                    case KEY_DOWN_UP:
                    case KEY_DOWN:
                    case KEY_UP:
                        parseKeyReaction(gesture, ReactionType.fromString(reactionType));
                        break;
                }
            }
        )
    )*
    {state.addGesture(gestureId, gesture);}
}

void parseKeyReaction(Gesture gesture, ReactionType reactionType) :
{
    String keyId;
}
{
    <KEY> <IS>
    keyId = <IDENTIFIER>.image

    {
		ButtonReactionConfig config = new ButtonReactionConfig(keyId, "keyboard");
		gesture.addReaction(new ButtonReaction(config));
	}
}

void parseAngleRule(ControllerState state, Gesture gesture) :
{
    Token   t;
    String  end1        = null;
    String  vertex      = null;
    String  end2        = null;
    Integer minAngle    = null;
    Integer maxAngle    = null;

    String  patternChunk1;
    String  patternChunk2;
    String  patternChunk3;
}
{
    (
        (
            <END1>
            <IS>
            end1 = <IDENTIFIER>.image
        )
        |
        (
            <END2>
            <IS>
            end2 = <IDENTIFIER>.image
        )
        |
        (
            <VERTEX> <IS>
            vertex = <IDENTIFIER>.image
        )
        |
        (
            <MIN_ANGLE> <IS>
            t = <NUMBER>
            {minAngle = Integer.parseInt(t.image);}
        )
        |
        (
            <MAX_ANGLE> <IS>
            t = <NUMBER>
            {maxAngle = Integer.parseInt(t.image);}
        )
    )*
    {
        System.out.printf("MAX_ANGLE: %d\n", maxAngle.intValue());
        System.out.printf("MIN_ANGLE: %d\n", minAngle.intValue());
        System.out.printf("END1: %s\n", end1);
        System.out.printf("END2: %s\n", end2);
        System.out.printf("VERTEX: %s\n", vertex);
        
        int end1Id     = Conversions.getJointId(end1);
        int vertexId   = Conversions.getJointId(vertex);
        int end2Id     = Conversions.getJointId(end2);
        
        patternChunk1 = String.format("Angle(end1=%d, vertex=%d, end2=%d, angle > %d, angle < %d)", end1Id,
                                                                                                    vertexId,
                                                                                                    end2Id,
                                                                                                    minAngle.intValue(),
                                                                                                    maxAngle.intValue());

        patternChunk2 = String.format("Angle(end1=%d, vertex=%d, end2=%d, angle < %d)", end1Id,
                                                                                        vertexId,
                                                                                        end2Id,
                                                                                        minAngle.intValue());

        patternChunk3 = String.format("Angle(end1=%d, vertex=%d, end2=%d, angle > %d)", end1Id,
                                                                                        vertexId,
                                                                                        end2Id,
                                                                                        maxAngle.intValue());


        state.addRule(new Angle(end1Id, vertexId, end2Id, 0));
        gesture.addRuleToEsperPattern(patternChunk1, String.format("(%s or %s)", patternChunk3, patternChunk2));
    }
}

void parseDistanceRule(ControllerState state, Gesture gesture, RuleType ruleType) :
{
    Token   t;
    String  joint1      = null;
    String  joint2      = null;
    Double  minDistance = null;
    Double  maxDistance = null;

    String  patternChunk1;
    String  patternChunk2;
    String  patternChunk3;
}
{
    (
        (
            <JOINT1>
            <IS>
            joint1 = <IDENTIFIER>.image
        )
        |
        (
            <JOINT2>
            <IS>
            joint2 = <IDENTIFIER>.image
        )
        |
        (
            <MIN_DISTANCE> <IS>
            t = <NUMBER>
            {minDistance = Double.parseDouble(t.image);}
        )
        |
        (
            <MAX_DISTANCE> <IS>
            t = <NUMBER>
            {maxDistance = Double.parseDouble(t.image);}
        )
    )*
    {
        System.out.printf("MAX_DISTANCE: %f\n", maxDistance.doubleValue());
        System.out.printf("MIN_DISTANCE: %f\n", minDistance.doubleValue());
        System.out.printf("JOINT1: %s\n", joint1);
        System.out.printf("JOINT2: %s\n", joint2);

        int joint1Id     = Conversions.getJointId(joint1);
        int joint2Id     = Conversions.getJointId(joint2);

        //ruleType.className is going to be either Distance, DistanceX, DistanceY or DistanceZ.

        patternChunk1 = String.format(ruleType.className+"(joint1=%d, joint2=%d, distance > %f, distance < %f)", joint1Id,
                                                                                                      joint2Id,
                                                                                                      minDistance.doubleValue(),
                                                                                                      maxDistance.doubleValue());

        patternChunk2 = String.format(ruleType.className+"(joint1=%d, joint2=%d, distance < %f)", joint1Id,
                                                                                       joint2Id,
                                                                                       minDistance.doubleValue());

        patternChunk3 = String.format(ruleType.className+"(joint1=%d, joint2=%d, distance > %f)", joint1Id,
                                                                                       joint2Id,
                                                                                       maxDistance.doubleValue());
        switch(ruleType) {
            case DISTANCE:
                state.addRule(new Distance(joint1Id, joint2Id, 0));
                break;
            case DISTANCEX:
                state.addRule(new DistanceX(joint1Id, joint2Id, 0));
                break;
            case DISTANCEY:
                state.addRule(new DistanceY(joint1Id, joint2Id, 0));
                break;
            case DISTANCEZ:
                state.addRule(new DistanceZ(joint1Id, joint2Id, 0));
                break;
        }
        gesture.addRuleToEsperPattern(patternChunk1, String.format("(%s or %s)", patternChunk3, patternChunk2));
    }
}
