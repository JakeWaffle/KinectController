options {
    STATIC = false;
}
PARSER_BEGIN(ControllerFSMFactory)
package com.wafflesoft.kinectcontroller.config;

import java.io.*;
import java.util.*;
import com.wafflesoft.kinectcontroller.controller.*;
import com.wafflesoft.kinectcontroller.posturerules.*;

import com.wafflesoft.kinectcontroller.Conversions;

//These are the Reaction objects.

import com.wafflesoft.kinectcontroller.emulation.*;
import com.wafflesoft.kinectcontroller.emulation.reactions.*;
import com.wafflesoft.kinectcontroller.emulation.reactions.config.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ControllerFSMFactory {
    private static final Logger _logger = LoggerFactory.getLogger(ControllerFSMFactory.class);
    private ControllerStateMachine _csm;
    private String _startingStateId = null;

    private void addStartingState(String stateId) {
        //If we can't change the state, then we'll just store the id until the state is added later.
        if (!_csm.changeState(stateId)) {
            _startingStateId = stateId;
        }
    }

    private void addState(ControllerState state) {
        _csm.addState(state);

        //If the starting state hasn't been set and this state is the starting state.
        if (_startingStateId != null && _startingStateId.equals(state.stateId)) {
            if (_csm.changeState(_startingStateId)) {
                _startingStateId = null;
            }
        }
    }
}

PARSER_END(ControllerFSMFactory)

//Generic tokens
TOKEN: {
    < STARTING_STATE : "starting_state" > |
    < IS : "is" > |
    < VERSION : "version" > |
    < STATE : "state" > |
    < GESTURE : "gesture" > |
    < MOUSE_GESTURE : "gesture mouse using" > |
    < RULE : "rule" > |
    < END1 : "end1" > |
    < END2 : "end2" > |
    < JOINT1 : "joint1" > |
    < JOINT2 : "joint2" > |
    < JOINT : "joint" > |
    < VERTEX : "vertex" > |
    < MIN_ANGLE : "min_angle" > |
    < MAX_ANGLE : "max_angle" > |
    < MIN_DISTANCE : "min_distance" > |
    < MAX_DISTANCE : "max_distance" > |
    < MIN_POSITION : "min_position" > |
    < MAX_POSITION : "max_position" > |
    < POINT : "point"> |
    < REACTION : "reaction" > |
    < KEY : "key" > |
    < NUMBER : (["-"])* (["0"-"9"])+ (".")* (["0"-"9"])* > |
    < TEST_NUMBER : (["0"-"9"])+ > |
    < IDENTIFIER : (["0"-"9"] | ["a"-"z"] | ["A"-"Z"] | "_" | "-")+ > |
    < COMMA : (",") ("\\s")*>
}

SKIP: {
    " " |
    "\t" |
    "\n" |
    "\r" |
    <"//" (~["\n","\r"])* ("\n"|"\r")>
}

ControllerStateMachine create() :
{
    Token t;
    int version;
}
{
    {_csm = new ControllerStateMachine();}
    
    <VERSION>
    
    t = <NUMBER>

    {version = Integer.parseInt(t.image);}
    
    {
        switch(version) {
            case 1:
                parseVersion1();
                break;
        }
    }

    <EOF>
    {return _csm;}
}

void parseVersion1() :
{
    String stateId;
    ControllerState state;
}
{
    (
        (
            <STARTING_STATE>
            <IS>
            stateId = <IDENTIFIER>.image
            {addStartingState(stateId);}
        )
        |
        (
            <STATE>
            stateId = <IDENTIFIER>.image
            state = parseState(stateId)
            {addState(state);}
        )
    )*
}

ControllerState parseState(String stateId) :
{
    ControllerState state;
    String gestureId;
    String armId;
}
{
    {state = new ControllerState(stateId, _csm);}
    (
        (
            <GESTURE>
            gestureId = <IDENTIFIER>.image
            //This needs to return some information that can be given to the controller state.
            parseGesture(gestureId, state)
        )
        |
        (
            <MOUSE_GESTURE>
            armId = <IDENTIFIER>.image
            addMouseGesture(armId)
        )
    )*
    {return state;}
}

void parseGesture(String gestureId, ControllerState state) :
{
    String          ruleType;
    String          reactionType;
    Token           t;
    Gesture         gesture = new Gesture(gestureId, state);
}
{
    (
        (
            <RULE>
            ruleType = <IDENTIFIER>.image
            {
                switch(RuleType.fromString(ruleType)) {
                    case DISTANCE_FROM_POINT:
                        parseDistanceFromPointRule(state, gesture);
                        break;
                    case POSITIONX:
                    case POSITIONY:
                    case POSITIONZ:
                        parsePositionRule(state, gesture, RuleType.fromString(ruleType));
                        break;
                    case ANGLE:
                        parseAngleRule(state, gesture);
                        break;
                    case DISTANCE:
                    case DISTANCEX:
                    case DISTANCEY:
                    case DISTANCEZ:
                        parseDistanceRule(state, gesture, RuleType.fromString(ruleType));
                        break;
                }
            }
        )
        |
        (
            <REACTION>
            reactionType = <IDENTIFIER>.image
            {
                switch(ReactionType.fromString(reactionType)) {
                    case KEY_DOWN_UP:
                    case KEY_DOWN:
                    case KEY_UP:
                        parseKeyReaction(gesture, ReactionType.fromString(reactionType));
                        break;
                    case SHUTDOWN:
                        gesture.addReaction(new ShutdownReaction());
                        break;
                }
            }
        )
    )*
    {state.addGesture(gestureId, gesture);}
}

void parseKeyReaction(Gesture gesture, ReactionType reactionType) :
{
    String keyId;
}
{
    <KEY> <IS>
    keyId = <IDENTIFIER>.image

    {
		ButtonReactionConfig config = new ButtonReactionConfig(keyId, "keyboard");
		gesture.addReaction(new ButtonReaction(config));
	}
}

void parseAngleRule(ControllerState state, Gesture gesture) :
{
    Token   t;
    String  end1        = null;
    String  vertex      = null;
    String  end2        = null;
    Integer minAngle    = null;
    Integer maxAngle    = null;

    String  patternChunk1;
    String  patternChunk2;
    String  patternChunk3;
}
{
    (
        (
            <END1>
            <IS>
            end1 = <IDENTIFIER>.image
        )
        |
        (
            <END2>
            <IS>
            end2 = <IDENTIFIER>.image
        )
        |
        (
            <VERTEX> <IS>
            vertex = <IDENTIFIER>.image
        )
        |
        (
            <MIN_ANGLE> <IS>
            t = <NUMBER>
            {minAngle = Integer.parseInt(t.image);}
        )
        |
        (
            <MAX_ANGLE> <IS>
            t = <NUMBER>
            {maxAngle = Integer.parseInt(t.image);}
        )
    )*

    {
        //Error checking for a valid Angle rule
        boolean valid = true;

        if (end1 == null) {
            _logger.error(String.format("Angle Rule within %s gesture requires an end1 attribute!", gesture.gestureId));
            _logger.error("Usage:\ngesture <GestureId>\n\trule Angle\n\t\tend1 is <JointID>");
            valid = false;
        }
        if (vertex == null) {
            _logger.error(String.format("Angle Rule within %s gesture requires an vertex attribute!", gesture.gestureId));
            _logger.error("Usage:\ngesture <GestureId>\n\trule Angle\n\t\tvertex is <JointID>");
            valid = false;
        }
        if (end2 == null) {
            _logger.error(String.format("Angle Rule within %s gesture requires an end2 attribute!", gesture.gestureId));
            _logger.error("Usage:\ngesture <GestureId>\n\trule Angle\n\t\tend2 is <JointID>");
            valid = false;
        }
        if (minAngle == null) {
            _logger.error(String.format("Angle Rule within %s gesture requires an min_angle attribute!", gesture.gestureId));
            _logger.error("Usage:\ngesture <GestureId>\n\trule Angle\n\t\tmin_angle is <JointID>");
            valid = false;
        }
        if (maxAngle == null) {
            _logger.error(String.format("Angle Rule within %s gesture requires an max_angle attribute!", gesture.gestureId));
            _logger.error("Usage:\ngesture <GestureId>\n\trule Angle\n\t\tmax_angle is <JointID>");
            valid = false;
        }
        if (!valid) {
            System.exit(1);
        }
    }

    addAngleRule(gesture, end1, vertex, end2, minAngle, maxAngle)
}

void parseDistanceRule(ControllerState state, Gesture gesture, RuleType ruleType) :
{
    Token   t;
    String  joint1      = null;
    String  joint2      = null;
    Double  minDistance = null;
    Double  maxDistance = null;

    String  patternChunk1;
    String  patternChunk2;
    String  patternChunk3;
}
{
    (
        (
            <JOINT1>
            <IS>
            joint1 = <IDENTIFIER>.image
        )
        |
        (
            <JOINT2>
            <IS>
            joint2 = <IDENTIFIER>.image
        )
        |
        (
            <MIN_DISTANCE> <IS>
            t = <NUMBER>
            {minDistance = Double.parseDouble(t.image);}
        )
        |
        (
            <MAX_DISTANCE> <IS>
            t = <NUMBER>
            {maxDistance = Double.parseDouble(t.image);}
        )
    )*
    {
        System.out.printf("MAX_DISTANCE: %f\n", maxDistance.doubleValue());
        System.out.printf("MIN_DISTANCE: %f\n", minDistance.doubleValue());
        System.out.printf("JOINT1: %s\n", joint1);
        System.out.printf("JOINT2: %s\n", joint2);

        int joint1Id     = Conversions.getJointId(joint1);
        int joint2Id     = Conversions.getJointId(joint2);

        //ruleType.className is going to be either Distance, DistanceX, DistanceY or DistanceZ.

        patternChunk1 = String.format(ruleType.className+"(joint1=%d, joint2=%d, distance > %f, distance < %f)", joint1Id,
                                                                                                      joint2Id,
                                                                                                      minDistance.doubleValue(),
                                                                                                      maxDistance.doubleValue());

        patternChunk2 = String.format(ruleType.className+"(joint1=%d, joint2=%d, distance < %f)", joint1Id,
                                                                                       joint2Id,
                                                                                       minDistance.doubleValue());

        patternChunk3 = String.format(ruleType.className+"(joint1=%d, joint2=%d, distance > %f)", joint1Id,
                                                                                       joint2Id,
                                                                                       maxDistance.doubleValue());
        switch(ruleType) {
            case DISTANCE:
                state.addRule(new Distance(joint1Id, joint2Id, 0));
                break;
            case DISTANCEX:
                state.addRule(new DistanceX(joint1Id, joint2Id, 0));
                break;
            case DISTANCEY:
                state.addRule(new DistanceY(joint1Id, joint2Id, 0));
                break;
            case DISTANCEZ:
                state.addRule(new DistanceZ(joint1Id, joint2Id, 0));
                break;
        }
        gesture.addRuleToEsperPattern(patternChunk1, String.format("(%s or %s)", patternChunk3, patternChunk2));
    }
}

void parsePositionRule(ControllerState state, Gesture gesture, RuleType ruleType) :
{
    Token   t;
    String  joint   = null;
    Double  minPos  = null;
    Double  maxPos  = null;

    String  patternChunk1;
    String  patternChunk2;
    String  patternChunk3;
}
{
    (
        (
            <JOINT>
            <IS>
            joint = <IDENTIFIER>.image
        )
        |
        (
            <MIN_POSITION> <IS>
            t = <NUMBER>
            {minPos = Double.parseDouble(t.image);}
        )
        |
        (
            <MAX_POSITION> <IS>
            t = <NUMBER>
            {maxPos = Double.parseDouble(t.image);}
        )
    )*
    {
        System.out.printf("MAX_POSITION: %f\n", maxPos.doubleValue());
        System.out.printf("MIN_POSITION: %f\n", minPos.doubleValue());
        System.out.printf("JOINT: %s\n", joint);

        int jointId     = Conversions.getJointId(joint);

        //ruleType.className is going to be either PositionX, PositionY or PositionZ.

        patternChunk1 = String.format(ruleType.className+"(joint=%d, pos > %f, pos < %f)", jointId,
                                                                                           minPos.doubleValue(),
                                                                                           maxPos.doubleValue());

        patternChunk2 = String.format(ruleType.className+"(joint=%d, pos < %f)", jointId,
                                                                                  minPos.doubleValue());

        patternChunk3 = String.format(ruleType.className+"(joint=%d, pos > %f)", jointId,
                                                                                  maxPos.doubleValue());
        switch(ruleType) {
            case POSITIONX:
                state.addRule(new PositionX(jointId, 0));
                break;
            case POSITIONY:
                state.addRule(new PositionY(jointId, 0));
                break;
            case POSITIONZ:
                state.addRule(new PositionZ(jointId, 0));
                break;
        }
        gesture.addRuleToEsperPattern(patternChunk1, String.format("(%s or %s)", patternChunk3, patternChunk2));
    }
}

void parseDistanceFromPointRule(ControllerState state, Gesture gesture) :
{
    Token   t;
    String  joint       = null;
    Double  minDistance = null;
    Double  maxDistance = null;
    Double  pointX      = new Double(0);
    Double  pointY      = new Double(0);
    Double  pointZ      = new Double(1500);

    String  patternChunk1;
    String  patternChunk2;
    String  patternChunk3;
}
{
    (
        (
            <JOINT> <IS>
            joint = <IDENTIFIER>.image
        )
        |
        (
            <POINT> <IS>
            t = <NUMBER>
            {pointX = Double.parseDouble(t.image);}
            <COMMA>
            t = <NUMBER>
            {pointY = Double.parseDouble(t.image);}
            <COMMA>
            t = <NUMBER>
            {pointZ = Double.parseDouble(t.image);}
        )
        |
        (
            <MIN_DISTANCE> <IS>
            t = <NUMBER>
            {minDistance = Double.parseDouble(t.image);}
        )
        |
        (
            <MAX_DISTANCE> <IS>
            t = <NUMBER>
            {maxDistance = Double.parseDouble(t.image);}
        )
    )*
    {
        System.out.printf("MAX_DISTANCE: %f\n", maxDistance.doubleValue());
        System.out.printf("MIN_DISTANCE: %f\n", minDistance.doubleValue());
        System.out.printf("JOINT: %s\n", joint);

        int jointId = Conversions.getJointId(joint);
        double[] point = new double[] {pointX.doubleValue(), pointY.doubleValue(), pointZ.doubleValue()};
        state.addRule(new DistanceFromPoint(point, jointId));

        //TODO What can we do to optimize this? Use a hash for the Esper point identification?

        patternChunk1 = String.format("DistanceFromPoint(point[0]=%f, point[1]=%f, point[2]=%f, joint=%d, distance > %f, distance < %f)",
                                                                                        pointX,
                                                                                        pointY,
                                                                                        pointZ,
                                                                                        jointId,
                                                                                        minDistance.doubleValue(),
                                                                                        maxDistance.doubleValue());

        patternChunk2 = String.format("DistanceFromPoint(point[0]=%f, point[1]=%f, point[2]=%f, joint=%d, distance < %f)",
                                                                                        pointX,
                                                                                        pointY,
                                                                                        pointZ,
                                                                                        jointId,
                                                                                        minDistance.doubleValue());

        patternChunk3 = String.format("DistanceFromPoint(point[0]=%f, point[1]=%f, point[2]=%f, joint=%d, distance > %f)",
                                                                                        pointX,
                                                                                        pointY,
                                                                                        pointZ,
                                                                                        jointId,
                                                                                        maxDistance.doubleValue());

        gesture.addRuleToEsperPattern(patternChunk1, String.format("(%s or %s)", patternChunk3, patternChunk2));
    }
}

void addMouseGesture(String armId) :
{

}
{

}

void addAngleRule(Gesture gesture, String end1, String vertex, String end2, Integer minAngle, Integer maxAngle) :
{
}
{
    {
        System.out.printf("MAX_ANGLE: %d\n", maxAngle.intValue());
        System.out.printf("MIN_ANGLE: %d\n", minAngle.intValue());
        System.out.printf("END1: %s\n", end1);
        System.out.printf("END2: %s\n", end2);
        System.out.printf("VERTEX: %s\n", vertex);

        int end1Id     = Conversions.getJointId(end1);
        int vertexId   = Conversions.getJointId(vertex);
        int end2Id     = Conversions.getJointId(end2);

        String patternChunk1 = String.format("Angle(end1=%d, vertex=%d, end2=%d, angle > %d, angle < %d)", end1Id,
                                                                                                    vertexId,
                                                                                                    end2Id,
                                                                                                    minAngle.intValue(),
                                                                                                    maxAngle.intValue());

        String patternChunk2 = String.format("Angle(end1=%d, vertex=%d, end2=%d, angle < %d)", end1Id,
                                                                                        vertexId,
                                                                                        end2Id,
                                                                                        minAngle.intValue());

        String patternChunk3 = String.format("Angle(end1=%d, vertex=%d, end2=%d, angle > %d)", end1Id,
                                                                                        vertexId,
                                                                                        end2Id,
                                                                                        maxAngle.intValue());

        gesture.addRuleToEsperPattern(patternChunk1, String.format("(%s or %s)", patternChunk3, patternChunk2));
    }
}