

//TODO Start adding enumerations so that I don't have to deal with spelling mistakes. They're just nice for later anyway.

options {
    STATIC = false;
}
PARSER_BEGIN(ControllerFSMFactory)
package com.lcsc.hackathon.kinectcontroller.config;

import java.io.*;
import java.util.*;
import com.lcsc.hackathon.kinectcontroller.controller.*;
import com.lcsc.hackathon.kinectcontroller.rules.*;

public class ControllerFSMFactory {
    private ControllerStateMachine _csm;
    private String _startingStateId = null;

    private void addStartingState(String stateId) {
        //If we can't change the state, then we'll just store the id until the state is added later.
        if (!_csm.changeState(stateId)) {
            _startingStateId = stateId;
        }
    }

    private void addState(ControllerState state) {
        _csm.addState(state);

        //If the starting state hasn't been set and this state is the starting state.
        if (_startingStateId != null && _startingStateId.equals(state.stateId)) {
            if (_csm.changeState(_startingStateId)) {
                _startingStateId = null;
            }
        }
    }
}

PARSER_END(ControllerFSMFactory)

//Generic tokens
TOKEN: {
    < STARTING_STATE : "starting_state" > |
    < IS : "is" > |
    < VERSION : "version" > |
    < STATE : "state" > |
    < GESTURE : "gesture" > |
    < MOUSE_GESTURE : "gesture mouse using" > |
    < RULE : "rule" > |
    < REACTION : "reaction" > |
    < END : "end" > |
    < VERTEX : "vertex" > |
    < MIN_ANGLE : "min_angle" > |
    < MAX_ANGLE : "max_angle" > |
    < NUMBER : (["0"-"9"])+ (".")* (["0"-"9"])* > |
    < IDENTIFIER : (["0"-"9"] | ["a"-"z"] | ["A"-"Z"] | "_" | "-")+ >
}

SKIP: {
    " " |
    "\t" |
    "\n" |
    "\r" |
    <"//" (~["\n","\r"])* ("\n"|"\r")>
}

ControllerStateMachine create() :
{
    Token t;
    int version;
}
{
    {_csm = new ControllerStateMachine();}
    
    <VERSION>
    
    t = <NUMBER>

    {version = Integer.parseInt(t.image);}
    
    {
        switch(version) {
            case 1:
                parseVersion1();
                break;
        }
    }

    <EOF>
    {return _csm;}
}

void parseVersion1() :
{
    String stateId;
    ControllerState state;
}
{
    (
        (
            <STARTING_STATE>
            <IS>
            stateId = <IDENTIFIER>.image
            {addStartingState(stateId);}
        )
        |
        (
            <STATE>
            stateId = <IDENTIFIER>.image
            state = parseState(stateId)
            {addState(state);}
        )
    )*
}

ControllerState parseState(String stateId) :
{
    ControllerState state;
    String gestureId;
    String armId;
}
{
    {state = new ControllerState(stateId);}
    (
        (
            <GESTURE>
            gestureId = <IDENTIFIER>.image
            //This needs to return some information that can be given to the controller state.
            //parseGesture()
        )
        |
        (
            <MOUSE_GESTURE>
            armId = <IDENTIFIER>.image
            //TODO Add mouse gesture to the state
        )
    )*
    {return state;}
}

List<Object> parseGesture(String gestureId) :
{
    String          ruleType;
    String          reactionType;
    Token           t;
    List<Object>    rules               = new ArrayList<Object>();
    Gesture         gesture             = new Gesture(gestureId);
    String          gestureMatchQuery   = String.format("%s as gestureId from pattern[", gestureId);
}
{
    (
        (
            <RULE>
            ruleType = <IDENTIFIER>.image
            {
                switch(RuleType.fromString(ruleType)) {
                    case RuleType.ABS_DISTANCE:
                        break;
                    case RuleType.ABS_DISTANCEX:
                        break;
                    case RuleType.ABS_DISTANCEY:
                        break;
                    case RuleType.ABS_DISTANCEZ:
                        break;
                    case RuleType.ANGLE:
                        rules.add(parseAngleRule());
                        break;
                    case RuleType.DISTANCE:
                        break;
                    case RuleType.DISTANCEX:
                        break;
                    case RuleType.DISTANCEY:
                        break;
                    case RuleType.DISTANCEZ:
                        break;
                }
            }
        )
        |
        (
            <REACTION>
            reactionType = <IDENTIFIER>.image
            {
                switch(ReactionType.fromString(reactionType)) {
                    case ReactionType.KEY_PRESS:
                        break;
                    case ReactionType.KEY_DOWN:
                        break;
                    case ReactionType.KEY_UP:
                        break;
                }
            }
        )
    )*

    {return rules;}
}

Object parseAngleRule() :
{
    String  end1        = null;
    String  vertex      = null;
    String  end2        = null;
    Integer minAngle    = null;
    Integer maxAngle    = null;
    String  matchQuery  = null;
}
{
    (
        (
            {
                String end;
            }
            <END>
            t = <NUMBER>
            <IS>
            end = <IDENTIFIER>.image
            {
                if (Integer.parseInt(t.image) == 1) {
                    end1 = end;
                }
                else if (Integer.parseInt(t.image) == 2) {
                    end2 = end;
                }
            }
        )
        |
        (
            <VERTEX> <IS>
            vertex = <IDENTIFIER>.image
        )
        |
        (
            <MIN_ANGLE> <IS>
            t = <NUMBER>
            {minAngle = Integer.parseInt(t.image);}
        )
        |
        (
            <MAX_ANGLE> <IS>
            t = <NUMBER>
            {maxAngle = Integer.parseInt(t.image);}
        )
    )*
    //TODO Along with the java bean, we need to compile a list of the esper queries for this gesture.
    //TODO Calculate the sha256 hash for the unique rule and reference it in the esper query for lookup of java beans.
    //"gestureId as triggerId from pattern[every ((%s or %s) -> %s], patternChunk3, patternChunk2, patternChunk1)
    /*
    patternChunk1 = String.format("AngleRule(end1=%d, vertex=%d, end2=%d, angle > %f, angle < %f)", end1,
                                                                                   vertex,
                                                                                   end2,
                                                                                   minAngle,
                                                                                   maxAngle);

    patternChunk2 = String.format("AngleRule(end1=%d, vertex=%d, end2=%d, angle < %f)", end1,
                                                                                        vertex,
                                                                                        end2,
                                                                                        minAngle);

    patternChunk3 = String.format("AngleRule(end1=%d, vertex=%d, end2=%d, angle > %f)", end1,
                                                                                        vertex,
                                                                                        end2,
                                                                                        maxAngle);
    */

    {return new Angle("some_hash", end1, vertex, end2, 0);}
}