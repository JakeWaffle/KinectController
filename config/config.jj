options {
    STATIC = false;
}
PARSER_BEGIN(ControllerStateMachine)

package org.dojo.jsl.parser;

import java.io.*;
import java.util.*;

public class ControllerSMFactory {
    private ControllerStateMachine _csm = new ControllerStateMachine();

    public static ControllerStateMachine parseConfig(InputStream configFile) {
        ControllerSMFactory csmf = new ControllerSMFactory(configFile);
        return csmf.start();
    }

    /**
     * This interface allows Javacc to pass in ControllerStates into the state machine.
     * @param stateId An identifier for the Controller state.
     * @param newState A state containing all the information needed for handling a particular state of the Controller.
     */
    public void addState(String stateId, ControllerState newState) {
        _states.put(stateId, newState);
    }

    public void changeState(String stateId) {
        _curState = _states.get(stateId);
    }

    /**
     * @return This returns the current state of the state machine.
     */
    public ControllerState state() {
        return _curState;
    }
}

PARSER_END(ControllerStateMachine)

TOKEN : { < EOL : ”\n” | ”\r” | ”\r\n” > }
TOKEN : { < STATE : "state" > }
TOKEN : { < GESTURE : "gesture" > }
TOKEN : { < RULE : "rule" > }
TOKEN : { < REACTION : "reaction" > }

ControllerStateMachine parse() :
{

}
{
    
    { return _csm; }
}