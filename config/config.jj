options {
    STATIC = false;
}
PARSER_BEGIN(ControllerFSMFactory)
package com.wafflesoft.kinectcontroller.config.generated;

import java.io.*;
import java.util.*;
import com.wafflesoft.kinectcontroller.controller.*;
import com.wafflesoft.kinectcontroller.posturerules.*;

import com.wafflesoft.kinectcontroller.Conversions;

import com.wafflesoft.kinectcontroller.config.factories.PremadeGestureType;
import com.wafflesoft.kinectcontroller.config.factories.GestureFactory;

import com.wafflesoft.kinectcontroller.config.installers.*;

//These are the Reaction objects.

import com.wafflesoft.kinectcontroller.emulation.*;
import com.wafflesoft.kinectcontroller.emulation.reactions.persistent.*;
import com.wafflesoft.kinectcontroller.emulation.reactions.hapaxlegomenon.*;
import com.wafflesoft.kinectcontroller.emulation.reactions.config.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.InstantiationException;

public class ControllerFSMFactory {
    private static final Logger _logger = LoggerFactory.getLogger(ControllerFSMFactory.class);
    private ControllerStateMachine _csm;
    private String _startingStateId = null;

    private void addStartingState(String stateId) {
        //If we can't change the state, then we'll just store the id until the state is added later.
        if (!_csm.changeState(stateId)) {
            _startingStateId = stateId;
        }
    }

    private void addState(ControllerState state) {
        _csm.addState(state);

        //If the starting state hasn't been set and this state is the starting state.
        if (_startingStateId != null && _startingStateId.equals(state.stateId)) {
            if (_csm.changeState(_startingStateId)) {
                _startingStateId = null;
            }
        }
    }
}

PARSER_END(ControllerFSMFactory)

//Generic tokens
TOKEN: {
    < STARTING_STATE : "starting_state" > |
    < IS : "is" > |
    < VERSION : "version" > |
    < STATE : "state" > |
    < GESTURE : "gesture" > |
    < PREMADE_GESTURE : "premade_gesture" > |
    < ARM_ID : ("left_arm" | "right_arm") > |
    < RULE : "rule" > |
    < END1 : "end1" > |
    < END2 : "end2" > |
    < JOINT1 : "joint1" > |
    < JOINT2 : "joint2" > |
    < JOINT : "joint" > |
    < VERTEX : "vertex" > |
    < MIN_ANGLE : "min_angle" > |
    < MAX_ANGLE : "max_angle" > |
    < MIN_DISTANCE : "min_distance" > |
    < MAX_DISTANCE : "max_distance" > |
    < MIN_POSITION : "min_position" > |
    < MAX_POSITION : "max_position" > |
    < POINT : "point"> |
    < REACTION : "reaction" > |
    < KEY : "key" > |
    < NUMBER : (["-"])* (["0"-"9"])+ (".")* (["0"-"9"])* > |
    < TEST_NUMBER : (["0"-"9"])+ > |
    < IDENTIFIER : (["0"-"9"] | ["a"-"z"] | ["A"-"Z"] | "_" | "-")+ > |
    < COMMA : (",") ("\\s")*>
}

SKIP: {
    " " |
    "\t" |
    "\n" |
    "\r" |
    <"//" (~["\n","\r"])* ("\n"|"\r")>
}

ControllerStateMachine create() :
{
    Token t;
    int version;
}
{
    {_csm = new ControllerStateMachine();}
    
    <VERSION>
    
    t = <NUMBER>

    {version = Integer.parseInt(t.image);}
    
    {
        switch(version) {
            case 1:
                parseVersion1();
                break;
        }
    }

    <EOF>
    {return _csm;}
}

void parseVersion1() :
{
    String stateId;
    ControllerState state;
}
{
    (
        (
            <STARTING_STATE>
            <IS>
            stateId = <IDENTIFIER>.image
            {addStartingState(stateId);}
        )
        |
        (
            <STATE>
            stateId = <IDENTIFIER>.image
            state = parseState(stateId)
            {addState(state);}
        )
    )*
}

ControllerState parseState(String stateId) :
{
    ControllerState state;
    String gestureId;
    String armId;
}
{
    {state = new ControllerState(stateId, _csm);}
    (
        (
            <PREMADE_GESTURE>
            gestureId = <IDENTIFIER>.image
            parsePremadeGesture(gestureId, state)
        )
        |
        (
            <GESTURE>
            gestureId = <IDENTIFIER>.image
            //This needs to return some information that can be given to the controller state.
            parseGesture(gestureId, state)
        )
    )*
    {return state;}
}

void parsePremadeGesture(String gestureId, ControllerState state) :
{
    Token           t;
    Map<String,String> config = new HashMap<String,String>();

    String tmpKey;
    String tmpValue;
}
{
    (
        tmpKey = <IDENTIFIER>.image
        <IS>
        tmpValue = <IDENTIFIER>.image

        {config.put(tmpKey, tmpValue);}
    )*

    {
        //Using the a gesture id that was given in the config, we'll determine the class name for the factory that will
        //create and install the premade gesture.
        PremadeGestureType type = PremadeGestureType.fromString(gestureId);
        String factoryFullName  = "com.wafflesoft.kinectcontroller.config.factories." + type.factoryClassName;

        //This instantiates a GestureFactory for some premade gesture. We will be interacting with that implementation
        //through the GestureFactory interface
        try {
            GestureFactory factory = (GestureFactory)Class.forName(factoryFullName).newInstance();

            //This kicks off whatever specific implementation of the factory that was defined.
            boolean isValid = factory.loadConfig(config);

            //We will only install this gesture if the configuration was valid.
            if (isValid) {
                factory.installGesture(state);
            }
            else {
                _logger.warn("Invalid Configuration for Premade Gesture: " + gestureId);
            }
        } catch (ClassNotFoundException e) {
            _logger.warn(String.format("Factory Class Not Found: %s", factoryFullName), e);
        } catch (InstantiationException e) {
            _logger.warn(String.format("Factory Class Instantiation Failed: %s", factoryFullName), e);
        } catch (IllegalAccessException e) {
            _logger.warn(String.format("Factory Class Illegal Access: %s", factoryFullName), e);
        }
    }
}

void parseGesture(String gestureId, ControllerState state) :
{
    String          ruleType;
    String          reactionType;
    Token           t;
    Gesture         gesture = new Gesture(gestureId, state);
}
{
    (
        (
            <RULE>
            ruleType = <IDENTIFIER>.image
            {
                switch(RuleType.fromString(ruleType)) {
                    case DISTANCE_FROM_POINT:
                        parseDistanceFromPointRule(state, gesture);
                        break;
                    case POSITIONX:
                    case POSITIONY:
                    case POSITIONZ:
                        parsePositionRule(state, gesture, RuleType.fromString(ruleType));
                        break;
                    case ANGLE:
                        parseAngleRule(state, gesture);
                        break;
                    case DISTANCE:
                    case DISTANCEX:
                    case DISTANCEY:
                    case DISTANCEZ:
                        parseDistanceRule(state, gesture, RuleType.fromString(ruleType));
                        break;
                }
            }
        )
        |
        (
            <REACTION>
            reactionType = <IDENTIFIER>.image
            {
                switch(ReactionType.fromString(reactionType)) {
                    case KEY_DOWN_UP:
                    case KEY_DOWN:
                    case KEY_UP:
                        parseKeyReaction(gesture, ReactionType.fromString(reactionType));
                        break;
                    case SHUTDOWN:
                        gesture.addReaction(new ShutdownReaction());
                        break;
                }
            }
        )
    )*
    {state.addGesture(gestureId, gesture);}
}

void parseKeyReaction(Gesture gesture, ReactionType reactionType) :
{
    String keyId;
}
{
    <KEY> <IS>
    keyId = <IDENTIFIER>.image

    {
		ButtonReactionConfig config = new ButtonReactionConfig(keyId, "keyboard");
		gesture.addReaction(new ButtonReaction(config));
	}
}

void parseAngleRule(ControllerState state, Gesture gesture) :
{
    Token   t;
    String  end1        = null;
    String  vertex      = null;
    String  end2        = null;
    Integer minAngle    = null;
    Integer maxAngle    = null;
}
{
    (
        (
            <END1>
            <IS>
            end1 = <IDENTIFIER>.image
        )
        |
        (
            <END2>
            <IS>
            end2 = <IDENTIFIER>.image
        )
        |
        (
            <VERTEX> <IS>
            vertex = <IDENTIFIER>.image
        )
        |
        (
            <MIN_ANGLE> <IS>
            t = <NUMBER>
            {minAngle = Integer.parseInt(t.image);}
        )
        |
        (
            <MAX_ANGLE> <IS>
            t = <NUMBER>
            {maxAngle = Integer.parseInt(t.image);}
        )
    )*

    {
        String className = RuleType.ANGLE.className;

         //Error checking for a valid Angle rule
        boolean valid = true;

        if (end1 == null) {
            _logger.error(String.format("Angle Rule within %s gesture requires an end1 attribute!", gesture.gestureId));
            _logger.error("Usage:\ngesture <GestureId>\n\trule Angle\n\t\tend1 is <JointID>");
            valid = false;
        }
        if (vertex == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an vertex attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tvertex is <JointID>", className));
            valid = false;
        }
        if (end2 == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an end2 attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tend2 is <JointID>", className));
            valid = false;
        }
        if (minAngle == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an min_angle attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tmin_angle is <JointID>", className));
            valid = false;
        }
        if (maxAngle == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an max_angle attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tmax_angle is <JointID>", className));
            valid = false;
        }
        if (!valid) {
            System.exit(1);
        }

        AngleRuleInstaller.install(gesture, end1, vertex, end2, minAngle, maxAngle);
   }
}

void parseDistanceRule(ControllerState state, Gesture gesture, RuleType ruleType) :
{
    Token   t;
    String  joint1      = null;
    String  joint2      = null;
    Double  minDistance = null;
    Double  maxDistance = null;
}
{
    (
        (
            <JOINT1>
            <IS>
            joint1 = <IDENTIFIER>.image
        )
        |
        (
            <JOINT2>
            <IS>
            joint2 = <IDENTIFIER>.image
        )
        |
        (
            <MIN_DISTANCE> <IS>
            t = <NUMBER>
            {minDistance = Double.parseDouble(t.image);}
        )
        |
        (
            <MAX_DISTANCE> <IS>
            t = <NUMBER>
            {maxDistance = Double.parseDouble(t.image);}
        )
    )*
    {
        String className = ruleType.className;

        //Error checking for a valid Angle rule
        boolean valid = true;

        if (joint1 == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an joint1 attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tjoint1 is <JointID>", className));
            valid = false;
        }
        if (joint2 == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an joint2 attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tjoint2 is <JointID>", className));
            valid = false;
        }
        if (minDistance == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an min_distance attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tmin_distance is <Number>", className));
            valid = false;
        }
        if (maxDistance == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an max_distance attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tmax_distance is <Number>", className));
            valid = false;
        }
        if (!valid) {
            System.exit(1);
        }

        switch (ruleType) {
            case DISTANCE:
                DistanceRuleInstaller.install(gesture, joint1, joint2, minDistance, maxDistance);
                break;
            case DISTANCEX:
                DistanceRuleInstaller.installX(gesture, joint1, joint2, minDistance, maxDistance);
                break;
            case DISTANCEY:
                DistanceRuleInstaller.installY(gesture, joint1, joint2, minDistance, maxDistance);
                break;
            case DISTANCEZ:
                DistanceRuleInstaller.installZ(gesture, joint1, joint2, minDistance, maxDistance);
                break;
            default:
                _logger.error("Invalid RuleType given to parseDistanceRule(): " + ruleType.alias);
                System.exit(1);
                break;
        }
    }
}

void parsePositionRule(ControllerState state, Gesture gesture, RuleType ruleType) :
{
    Token   t;
    String  joint   = null;
    Double  minPos  = null;
    Double  maxPos  = null;
}
{
    (
        (
            <JOINT>
            <IS>
            joint = <IDENTIFIER>.image
        )
        |
        (
            <MIN_POSITION> <IS>
            t = <NUMBER>
            {minPos = Double.parseDouble(t.image);}
        )
        |
        (
            <MAX_POSITION> <IS>
            t = <NUMBER>
            {maxPos = Double.parseDouble(t.image);}
        )
    )*
    {
        String className = ruleType.className;

        //Error checking for a valid Angle rule
        boolean valid = true;

        if (joint == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an joint attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tjoint is <JointID>", className));
            valid = false;
        }
        if (minPos == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an min_position attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tmin_position is <Number>", className));
            valid = false;
        }
        if (maxPos == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an max_position attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tmax_position is <Number>", className));
            valid = false;
        }
        if (!valid) {
            System.exit(1);
        }

        switch(ruleType) {
            case POSITIONX:
                PositionRuleInstaller.installX(gesture, joint, minPos, maxPos);
                break;
            case POSITIONY:
                PositionRuleInstaller.installY(gesture, joint, minPos, maxPos);
                break;
            case POSITIONZ:
                PositionRuleInstaller.installZ(gesture, joint, minPos, maxPos);
                break;
            default:
                _logger.error("Invalid RuleType given to parsePositionRule(): " + ruleType.alias);
                System.exit(1);
                break;
        }
    }
}

void parseDistanceFromPointRule(ControllerState state, Gesture gesture) :
{
    Token   t;
    String  joint       = null;
    Double  minDistance = null;
    Double  maxDistance = null;
    Double  pointX      = new Double(0);
    Double  pointY      = new Double(0);
    Double  pointZ      = new Double(1500);
}
{
    (
        (
            <JOINT> <IS>
            joint = <IDENTIFIER>.image
        )
        |
        (
            <POINT> <IS>
            t = <NUMBER>
            {pointX = Double.parseDouble(t.image);}
            <COMMA>
            t = <NUMBER>
            {pointY = Double.parseDouble(t.image);}
            <COMMA>
            t = <NUMBER>
            {pointZ = Double.parseDouble(t.image);}
        )
        |
        (
            <MIN_DISTANCE> <IS>
            t = <NUMBER>
            {minDistance = Double.parseDouble(t.image);}
        )
        |
        (
            <MAX_DISTANCE> <IS>
            t = <NUMBER>
            {maxDistance = Double.parseDouble(t.image);}
        )
    )*
    {
        String className = RuleType.DISTANCE_FROM_POINT.className;

        //Error checking for a valid Angle rule
        boolean valid = true;

        if (joint == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an joint attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tjoint is <JointID>", className));
            valid = false;
        }
        if (minDistance == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an min_distance attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tmin_distance is <Number>", className));
            valid = false;
        }
        if (maxDistance == null) {
            _logger.error(String.format("%s Rule within %s gesture requires an max_distance attribute!", className, gesture.gestureId));
            _logger.error(String.format("Usage:\ngesture <GestureId>\n\trule %s\n\t\tmax_distance is <Number>", className));
            valid = false;
        }
        if (!valid) {
            System.exit(1);
        }

        double[] point = new double[] {pointX.doubleValue(), pointY.doubleValue(), pointZ.doubleValue()};

        DistanceFromPointRuleInstaller.install(gesture, joint, point, minDistance, maxDistance);
    }
}

